{"ast":null,"code":"var _jsxFileName = \"/home/reuven/homework/Appsforce-Home-Assignment/post-hub-ui/src/pages/Postsuser.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { PostsService } from '../services/posts.service';\nimport PostsTable from '../components/postsTable';\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport '../assets/css/posts.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostsUser = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const [posts, setPosts] = useState([]);\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    const socket = io('http://localhost:3001');\n    setSocket(socket);\n    return () => {\n      if (socket) {\n        socket.disconnect(); // Cleanup: Disconnect socket when component unmounts\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const fetchPostsByUser = async () => {\n      setPosts(await PostsService.getUserPosts(Number(userId)));\n    };\n    fetchPostsByUser();\n  }, [userId]);\n  const handleDeletePost = async postId => {\n    // Delete post locally before sending request to server\n    setPosts(prevPosts => prevPosts.filter(post => post.id !== postId));\n    // Send request to server to delete post\n    await PostsService.deletePostById(postId);\n    // Emit event to notify other clients that a post has been deleted\n    if (socket) {\n      socket.emit('postDeleted', postId);\n    }\n  };\n  useEffect(() => {\n    const handlePostDeleted = postId => {\n      setPosts(prevPosts => prevPosts.filter(post => post.id !== postId));\n    };\n    if (socket) {\n      socket.on('postDeleted', handlePostDeleted);\n      return () => {\n        socket.off('postDeleted', handlePostDeleted); // Cleanup: Remove event listener when component unmounts\n      };\n    }\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(PostsTable, {\n      posts: posts,\n      onDeletePost: handleDeletePost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(PostsUser, \"Q1aHKyTE2Afn+JPRGWnE56e2QYQ=\", false, function () {\n  return [useParams];\n});\n_c = PostsUser;\nexport default PostsUser;\nvar _c;\n$RefreshReg$(_c, \"PostsUser\");","map":{"version":3,"names":["React","useEffect","useState","PostsService","PostsTable","useParams","io","jsxDEV","_jsxDEV","PostsUser","_s","userId","posts","setPosts","socket","setSocket","disconnect","fetchPostsByUser","getUserPosts","Number","handleDeletePost","postId","prevPosts","filter","post","id","deletePostById","emit","handlePostDeleted","on","off","children","onDeletePost","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/reuven/homework/Appsforce-Home-Assignment/post-hub-ui/src/pages/Postsuser.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { PostsService } from '../services/posts.service';\nimport PostsTable from '../components/postsTable';\nimport { useParams } from 'react-router-dom';\nimport { Post } from '../models/posts.interfaces';\nimport { io, Socket } from 'socket.io-client';\nimport '../assets/css/posts.css';\n\nconst PostsUser: React.FC = () => {\n  const { userId } = useParams();\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [socket, setSocket] = useState<Socket | null>(null);\n\n  useEffect(() => {\n    const socket = io('http://localhost:3001');\n    setSocket(socket);\n\n    return () => {\n      if (socket) {\n        socket.disconnect(); // Cleanup: Disconnect socket when component unmounts\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const fetchPostsByUser = async () => {\n      setPosts(await PostsService.getUserPosts(Number(userId)));\n    };\n    fetchPostsByUser();\n  }, [userId]);\n\n  const handleDeletePost = async (postId: number) => {\n    // Delete post locally before sending request to server\n    setPosts((prevPosts) => prevPosts.filter((post) => post.id !== postId));\n    // Send request to server to delete post\n    await PostsService.deletePostById(postId);\n    // Emit event to notify other clients that a post has been deleted\n    if (socket) {\n      socket.emit('postDeleted', postId);\n    }\n  };\n\n  useEffect(() => {\n    const handlePostDeleted = (postId: number) => {\n      setPosts((prevPosts) => prevPosts.filter((post) => post.id !== postId));\n    };\n\n    if (socket) {\n      socket.on('postDeleted', handlePostDeleted);\n\n      return () => {\n        socket.off('postDeleted', handlePostDeleted); // Cleanup: Remove event listener when component unmounts\n      };\n    }\n  }, [socket]);\n\n  return (\n    <div>\n      <PostsTable posts={posts} onDeletePost={handleDeletePost} />\n    </div>\n  );\n};\n\nexport default PostsUser;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,2BAA2B;AACxD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,SAASC,EAAE,QAAgB,kBAAkB;AAC7C,OAAO,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,SAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM;IAAEC;EAAO,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC9B,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAgB,IAAI,CAAC;EAEzDD,SAAS,CAAC,MAAM;IACd,MAAMa,MAAM,GAAGR,EAAE,CAAC,uBAAuB,CAAC;IAC1CS,SAAS,CAACD,MAAM,CAAC;IAEjB,OAAO,MAAM;MACX,IAAIA,MAAM,EAAE;QACVA,MAAM,CAACE,UAAU,CAAC,CAAC,CAAC,CAAC;MACvB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENf,SAAS,CAAC,MAAM;IACd,MAAMgB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnCJ,QAAQ,CAAC,MAAMV,YAAY,CAACe,YAAY,CAACC,MAAM,CAACR,MAAM,CAAC,CAAC,CAAC;IAC3D,CAAC;IACDM,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACN,MAAM,CAAC,CAAC;EAEZ,MAAMS,gBAAgB,GAAG,MAAOC,MAAc,IAAK;IACjD;IACAR,QAAQ,CAAES,SAAS,IAAKA,SAAS,CAACC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAAC,CAAC;IACvE;IACA,MAAMlB,YAAY,CAACuB,cAAc,CAACL,MAAM,CAAC;IACzC;IACA,IAAIP,MAAM,EAAE;MACVA,MAAM,CAACa,IAAI,CAAC,aAAa,EAAEN,MAAM,CAAC;IACpC;EACF,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACd,MAAM2B,iBAAiB,GAAIP,MAAc,IAAK;MAC5CR,QAAQ,CAAES,SAAS,IAAKA,SAAS,CAACC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,MAAM,CAAC,CAAC;IACzE,CAAC;IAED,IAAIP,MAAM,EAAE;MACVA,MAAM,CAACe,EAAE,CAAC,aAAa,EAAED,iBAAiB,CAAC;MAE3C,OAAO,MAAM;QACXd,MAAM,CAACgB,GAAG,CAAC,aAAa,EAAEF,iBAAiB,CAAC,CAAC,CAAC;MAChD,CAAC;IACH;EACF,CAAC,EAAE,CAACd,MAAM,CAAC,CAAC;EAEZ,oBACEN,OAAA;IAAAuB,QAAA,eACEvB,OAAA,CAACJ,UAAU;MAACQ,KAAK,EAAEA,KAAM;MAACoB,YAAY,EAAEZ;IAAiB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzD,CAAC;AAEV,CAAC;AAAC1B,EAAA,CArDID,SAAmB;EAAA,QACJJ,SAAS;AAAA;AAAAgC,EAAA,GADxB5B,SAAmB;AAuDzB,eAAeA,SAAS;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}