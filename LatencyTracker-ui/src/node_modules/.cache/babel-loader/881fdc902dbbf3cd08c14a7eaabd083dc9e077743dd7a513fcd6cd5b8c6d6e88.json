{"ast":null,"code":"var _jsxFileName = \"/home/reuven/homework/Appsforce-Home-Assignment/post-hub-ui/src/pages/Postsuser.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { PostsService } from '../services/posts.service';\nimport PostsTable from '../components/postsTable';\nimport { useParams } from 'react-router-dom';\nimport { io } from 'socket.io-client';\nimport '../assets/css/posts.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostsUser = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const [posts, setPosts] = useState([]);\n  const [deletePost, setDeletePost] = useState(null);\n  const [socket, setSocket] = useState();\n  useEffect(() => {\n    const fetchPostsByUser = async () => {\n      setPosts(await PostsService.getUserPosts(Number(userId)));\n    };\n    fetchPostsByUser();\n  }, [userId]);\n  useEffect(() => {\n    const socket = io('http://localhost:3000');\n    setSocket(socket);\n    return () => {\n      socket.disconnect(); // Cleanup: Close socket connection when component unmounts\n    };\n  }, []);\n  const send = postId => {\n    socket === null || socket === void 0 ? void 0 : socket.emit('postDeleted', postId);\n  };\n  useEffect(() => {\n    const deletePostById = async () => {\n      if (deletePost) {\n        await PostsService.deletePostById(deletePost.id);\n        send(deletePost.id);\n      }\n    };\n    deletePostById();\n  }, [deletePost, socket]);\n  useEffect(() => {\n    const updatePosts = () => {\n      if (socket) {\n        socket.on('postDeleted', postId => {\n          setPosts(posts => posts.filter(post => post.id !== postId)); // Update posts using functional state update to ensure latest state is used\n        });\n      }\n    };\n    updatePosts();\n    return () => {\n      if (socket) {\n        socket.off('postDeleted'); // Cleanup: Remove event listener when component unmounts\n      }\n    };\n  }, [socket]); // Dependency: Ensure this effect runs when socket changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(PostsTable, {\n      posts: posts,\n      setDeletePost: setDeletePost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(PostsUser, \"gNW09SZ098DXo+aPR9VUwavLsEE=\", false, function () {\n  return [useParams];\n});\n_c = PostsUser;\nexport default PostsUser;\nvar _c;\n$RefreshReg$(_c, \"PostsUser\");","map":{"version":3,"names":["React","useEffect","useState","PostsService","PostsTable","useParams","io","jsxDEV","_jsxDEV","PostsUser","_s","userId","posts","setPosts","deletePost","setDeletePost","socket","setSocket","fetchPostsByUser","getUserPosts","Number","disconnect","send","postId","emit","deletePostById","id","updatePosts","on","filter","post","off","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/reuven/homework/Appsforce-Home-Assignment/post-hub-ui/src/pages/Postsuser.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { PostsService } from '../services/posts.service';\nimport PostsTable from '../components/postsTable';\nimport { useParams } from 'react-router-dom';\nimport { Post } from '../models/posts.interfaces';\nimport { io, Socket } from 'socket.io-client';\nimport '../assets/css/posts.css';\n\nconst PostsUser: React.FC = () => {\n  const { userId } = useParams();\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [deletePost, setDeletePost] = useState<Post | null>(null);\n  const [socket, setSocket] = useState<Socket>();\n\n  useEffect(() => {\n    const fetchPostsByUser = async () => {\n      setPosts(await PostsService.getUserPosts(Number(userId)));\n    };\n    fetchPostsByUser();\n  }, [userId]);\n\n  useEffect(() => {\n    const socket = io('http://localhost:3000');\n    setSocket(socket);\n    return () => {\n      socket.disconnect(); // Cleanup: Close socket connection when component unmounts\n    };\n  }, []);\n\n  const send = (postId: number) => {\n    socket?.emit('postDeleted', postId);\n  };\n\n  useEffect(() => {\n    const deletePostById = async () => {\n      if (deletePost) {\n        await PostsService.deletePostById(deletePost.id);\n        send(deletePost.id);\n      }\n    };\n    deletePostById();\n  }, [deletePost, socket]);\n\n  useEffect(() => {\n    const updatePosts = () => {\n      if (socket) {\n        socket.on('postDeleted', (postId: number) => {\n          setPosts((posts) => posts.filter((post) => post.id !== postId)); // Update posts using functional state update to ensure latest state is used\n        });\n      }\n    };\n    updatePosts();\n    return () => {\n      if (socket) {\n        socket.off('postDeleted'); // Cleanup: Remove event listener when component unmounts\n      }\n    };\n  }, [socket]); // Dependency: Ensure this effect runs when socket changes\n\n  return (\n    <div>\n      <PostsTable posts={posts} setDeletePost={setDeletePost} />\n    </div>\n  );\n};\n\nexport default PostsUser;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}