{"ast":null,"code":"var _jsxFileName = \"/home/reuven/homework/Appsforce-Home-Assignment/post-hub-ui/src/pages/Postsuser.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { PostsService } from '../services/posts.service';\nimport PostsTable from '../components/postsTable';\nimport { useParams } from 'react-router-dom';\nimport '../assets/css/posts.css';\nimport io from 'socket.io-client'; // Import socket.io-client\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostsUser = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const [posts, setPosts] = useState([]);\n  const [deletePost, setDeletePost] = useState(null);\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    const socket = io('ws://localhost:3001'); // Replace with your server address\n\n    // Listen for postDeleted event\n    socket.on('postDeleted', deletedPostId => {\n      // Update posts state to remove the deleted post\n      setPosts(prevPosts => prevPosts.filter(post => post.id !== deletedPostId));\n    });\n\n    // Clean up WebSocket connection on component unmount\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    const fetchPostsByUser = async () => {\n      setPosts(await PostsService.getUserPosts(Number(userId)));\n    };\n    fetchPostsByUser();\n  }, [userId]);\n  useEffect(() => {\n    const deletePostById = async () => {\n      if (deletePost) {\n        await PostsService.deletePostById(deletePost.id);\n        // setPosts(posts.filter((post) => post.id !== deletePost.id)); // Remove this line, handled by WebSocket event\n      }\n    };\n    deletePostById();\n  }, [deletePost]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(PostsTable, {\n      posts: posts,\n      setDeletePost: setDeletePost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 6\n  }, this);\n};\n_s(PostsUser, \"HuD7zToPc9aCx8IVendt/y2KfQk=\", false, function () {\n  return [useParams];\n});\n_c = PostsUser;\nexport default PostsUser;\nvar _c;\n$RefreshReg$(_c, \"PostsUser\");","map":{"version":3,"names":["React","useEffect","useState","PostsService","PostsTable","useParams","io","jsxDEV","_jsxDEV","PostsUser","_s","userId","posts","setPosts","deletePost","setDeletePost","socket","on","deletedPostId","prevPosts","filter","post","id","disconnect","fetchPostsByUser","getUserPosts","Number","deletePostById","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/reuven/homework/Appsforce-Home-Assignment/post-hub-ui/src/pages/Postsuser.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { PostsService } from '../services/posts.service';\nimport PostsTable from '../components/postsTable';\nimport { useParams } from 'react-router-dom';\nimport { Post } from '../models/posts.interfaces';\nimport '../assets/css/posts.css';\nimport io from 'socket.io-client'; // Import socket.io-client\n\nconst PostsUser: React.FC = () => {\n   const { userId } = useParams();\n   const [posts, setPosts] = useState<Post[]>([]);\n   const [deletePost, setDeletePost] = useState<Post | null>(null);\n   \n   // Initialize WebSocket connection\n   useEffect(() => {\n      const socket = io('ws://localhost:3001'); // Replace with your server address\n      \n      // Listen for postDeleted event\n      socket.on('postDeleted', (deletedPostId: number) => {\n         // Update posts state to remove the deleted post\n         setPosts(prevPosts => prevPosts.filter(post => post.id !== deletedPostId));\n      });\n      \n      // Clean up WebSocket connection on component unmount\n      return () => {\n         socket.disconnect();\n      };\n   }, []);\n\n   useEffect(() => {\n     const fetchPostsByUser = async () => {\n       setPosts(await PostsService.getUserPosts(Number(userId)));\n     };\n     fetchPostsByUser();\n   }, [userId]);\n\n   useEffect(() => {\n     const deletePostById = async () => {\n       if (deletePost) {\n         await PostsService.deletePostById(deletePost.id);\n         // setPosts(posts.filter((post) => post.id !== deletePost.id)); // Remove this line, handled by WebSocket event\n       }\n     };\n     deletePostById();\n   }, [deletePost]);\n\n   return (\n     <div>\n       <PostsTable posts={posts} setDeletePost={setDeletePost} />\n     </div>\n   );\n};\n\nexport default PostsUser;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,2BAA2B;AACxD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,OAAO,yBAAyB;AAChC,OAAOC,EAAE,MAAM,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,SAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM;IAAEC;EAAO,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC9B,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAc,IAAI,CAAC;;EAE/D;EACAD,SAAS,CAAC,MAAM;IACb,MAAMe,MAAM,GAAGV,EAAE,CAAC,qBAAqB,CAAC,CAAC,CAAC;;IAE1C;IACAU,MAAM,CAACC,EAAE,CAAC,aAAa,EAAGC,aAAqB,IAAK;MACjD;MACAL,QAAQ,CAACM,SAAS,IAAIA,SAAS,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,aAAa,CAAC,CAAC;IAC7E,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACVF,MAAM,CAACO,UAAU,CAAC,CAAC;IACtB,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAENtB,SAAS,CAAC,MAAM;IACd,MAAMuB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnCX,QAAQ,CAAC,MAAMV,YAAY,CAACsB,YAAY,CAACC,MAAM,CAACf,MAAM,CAAC,CAAC,CAAC;IAC3D,CAAC;IACDa,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACb,MAAM,CAAC,CAAC;EAEZV,SAAS,CAAC,MAAM;IACd,MAAM0B,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAIb,UAAU,EAAE;QACd,MAAMX,YAAY,CAACwB,cAAc,CAACb,UAAU,CAACQ,EAAE,CAAC;QAChD;MACF;IACF,CAAC;IACDK,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACb,UAAU,CAAC,CAAC;EAEhB,oBACEN,OAAA;IAAAoB,QAAA,eACEpB,OAAA,CAACJ,UAAU;MAACQ,KAAK,EAAEA,KAAM;MAACG,aAAa,EAAEA;IAAc;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEX,CAAC;AAACtB,EAAA,CA3CID,SAAmB;EAAA,QACHJ,SAAS;AAAA;AAAA4B,EAAA,GADzBxB,SAAmB;AA6CzB,eAAeA,SAAS;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}