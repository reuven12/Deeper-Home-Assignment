{"ast":null,"code":"var _jsxFileName = \"/home/reuven/homework/Appsforce-Home-Assignment/post-hub-ui/src/pages/Postsuser.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { PostsService } from '../services/posts.service';\nimport PostsTable from '../components/postsTable';\nimport { useParams } from 'react-router-dom';\nimport { io } from \"socket.io-client\";\nimport '../assets/css/posts.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostsUser = () => {\n  _s();\n  const {\n    userId\n  } = useParams();\n  const [posts, setPosts] = useState([]);\n  const [deletePost, setDeletePost] = useState(null);\n  const [socket, setSocket] = useState();\n  const send = postId => {\n    socket === null || socket === void 0 ? void 0 : socket.emit('postDeleted', postId);\n  };\n  useEffect(() => {\n    const fetchPostsByUser = async () => {\n      setPosts(await PostsService.getUserPosts(Number(userId)));\n    };\n    fetchPostsByUser();\n  }, [userId]);\n  useEffect(() => {\n    setSocket(io('http://localhost:3000'));\n  }, []);\n  useEffect(() => {\n    const deletePostById = async () => {\n      if (deletePost) {\n        await PostsService.deletePostById(deletePost.id);\n        send(deletePost.id);\n      }\n    };\n    deletePostById();\n  }, [deletePost]);\n  useEffect(() => {\n    const updatePosts = async () => {\n      if (socket) {\n        socket.on('postDeleted', postId => {\n          setPosts(posts.filter(post => post.id !== postId));\n        });\n      }\n    };\n    updatePosts();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(PostsTable, {\n      posts: posts,\n      setDeletePost: setDeletePost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(PostsUser, \"gNW09SZ098DXo+aPR9VUwavLsEE=\", false, function () {\n  return [useParams];\n});\n_c = PostsUser;\nexport default PostsUser;\nvar _c;\n$RefreshReg$(_c, \"PostsUser\");","map":{"version":3,"names":["React","useEffect","useState","PostsService","PostsTable","useParams","io","jsxDEV","_jsxDEV","PostsUser","_s","userId","posts","setPosts","deletePost","setDeletePost","socket","setSocket","send","postId","emit","fetchPostsByUser","getUserPosts","Number","deletePostById","id","updatePosts","on","filter","post","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/reuven/homework/Appsforce-Home-Assignment/post-hub-ui/src/pages/Postsuser.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { PostsService } from '../services/posts.service';\nimport PostsTable from '../components/postsTable';\nimport { useParams } from 'react-router-dom';\nimport { Post } from '../models/posts.interfaces';\nimport { io, Socket } from \"socket.io-client\";\nimport '../assets/css/posts.css';\n\nconst PostsUser: React.FC = () => {\n  const { userId } = useParams();\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [deletePost, setDeletePost] = useState<Post | null>(null);\n  const [socket, setSocket] = useState<Socket>();\n\n  const send = (postId: number) => {\n    socket?.emit('postDeleted', postId);\n  };\n  \n  useEffect(() => {\n    const fetchPostsByUser = async () => {\n      setPosts(await PostsService.getUserPosts(Number(userId)));\n    };\n    fetchPostsByUser();\n  }, [userId]);\n\n  useEffect(() => {\n    setSocket(io('http://localhost:3000'));\n  }, []);\n\n\n  useEffect(() => {\n    const deletePostById = async () => {\n      if (deletePost) {\n        await PostsService.deletePostById(deletePost.id);\n        send(deletePost.id);\n      }\n    };\n    deletePostById();\n  }, [deletePost]);\n\n  useEffect(() => {\n    const updatePosts = async () => {\n      if (socket) {\n        socket.on('postDeleted', (postId: number) => {\n          setPosts(posts.filter((post) => post.id !== postId));\n        });\n      }\n    };\n    updatePosts();\n  });\n\n  return (\n    <div>\n      <PostsTable posts={posts} setDeletePost={setDeletePost} />\n    </div>\n  );\n};\n\nexport default PostsUser;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,YAAY,QAAQ,2BAA2B;AACxD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,SAASC,EAAE,QAAgB,kBAAkB;AAC7C,OAAO,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,SAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM;IAAEC;EAAO,CAAC,GAAGN,SAAS,CAAC,CAAC;EAC9B,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAS,EAAE,CAAC;EAC9C,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAc,IAAI,CAAC;EAC/D,MAAM,CAACc,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAS,CAAC;EAE9C,MAAMgB,IAAI,GAAIC,MAAc,IAAK;IAC/BH,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEI,IAAI,CAAC,aAAa,EAAED,MAAM,CAAC;EACrC,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACd,MAAMoB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnCR,QAAQ,CAAC,MAAMV,YAAY,CAACmB,YAAY,CAACC,MAAM,CAACZ,MAAM,CAAC,CAAC,CAAC;IAC3D,CAAC;IACDU,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACV,MAAM,CAAC,CAAC;EAEZV,SAAS,CAAC,MAAM;IACdgB,SAAS,CAACX,EAAE,CAAC,uBAAuB,CAAC,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAGNL,SAAS,CAAC,MAAM;IACd,MAAMuB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAIV,UAAU,EAAE;QACd,MAAMX,YAAY,CAACqB,cAAc,CAACV,UAAU,CAACW,EAAE,CAAC;QAChDP,IAAI,CAACJ,UAAU,CAACW,EAAE,CAAC;MACrB;IACF,CAAC;IACDD,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAACV,UAAU,CAAC,CAAC;EAEhBb,SAAS,CAAC,MAAM;IACd,MAAMyB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAIV,MAAM,EAAE;QACVA,MAAM,CAACW,EAAE,CAAC,aAAa,EAAGR,MAAc,IAAK;UAC3CN,QAAQ,CAACD,KAAK,CAACgB,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACJ,EAAE,KAAKN,MAAM,CAAC,CAAC;QACtD,CAAC,CAAC;MACJ;IACF,CAAC;IACDO,WAAW,CAAC,CAAC;EACf,CAAC,CAAC;EAEF,oBACElB,OAAA;IAAAsB,QAAA,eACEtB,OAAA,CAACJ,UAAU;MAACQ,KAAK,EAAEA,KAAM;MAACG,aAAa,EAAEA;IAAc;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEV,CAAC;AAACxB,EAAA,CAhDID,SAAmB;EAAA,QACJJ,SAAS;AAAA;AAAA8B,EAAA,GADxB1B,SAAmB;AAkDzB,eAAeA,SAAS;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}